import java.io.*;
import java.util.*;

public class PointInPolygon {
   public static void main(String[] args) {
      Coordinate coordinate = new Coordinate(47.673132,-122.40540209522);
      double[] points = {-122.36474015999994, 47.711118960000078, -122.36633999999998, 47.71121904000006, -122.36604011999998, 47.708919000000037, -122.36701787999999, 47.708919000000037, -122.36899715999999, 47.708919000000037, -122.37104015999995, 47.708919000000037, -122.37623999999994, 47.70897696000003, -122.38004015999996, 47.709018990000061, -122.38044011999995, 47.709118980000028, -122.38103987999995, 47.70856899000006, -122.38472483999999, 47.706706980000035, -122.38779311999997, 47.704923990000054, -122.38900307999995, 47.703850020000061, -122.38974287999997, 47.70317601000005, -122.39223983999995, 47.70201897000004, -122.39324783999996, 47.701602000000037, -122.39513999999997, 47.700819000000081, -122.40238499999998, 47.698112970000068, -122.40344087999995, 47.697719040000038, -122.40504107999999, 47.695818960000054, -122.40634103999997, 47.693918970000027, -122.40624095999999, 47.693018970000026, -122.40434087999995, 47.690218980000054, -122.40384083999999, 47.689418970000077, -122.40544103999997, 47.686718970000072, -122.40784115999998, 47.680119000000047, -122.41222487999994, 47.677038030000062, -122.41239083999994, 47.676608010000052, -122.41254095999994, 47.676219030000027, -122.40784007999997, 47.67301899000006, -122.40734003999995, 47.672719020000045, -122.40704015999995, 47.672118990000058, -122.40573983999997, 47.670019020000041, -122.40541403999998, 47.669661990000066, -122.40363995999996, 47.667718980000075, -122.40164015999994, 47.666419020000035, -122.40092411999996, 47.666121030000056, -122.39924004, 47.665419030000066, -122.39714015999999, 47.66501898000007, -122.39403983999995, 47.664218970000036, -122.39484011999997, 47.664719010000056, -122.39524007999995, 47.665218960000061, -122.39474003999999, 47.66501898000007, -122.39423999999997, 47.665519020000033, -122.39344007999995, 47.665918980000072, -122.39294003999998, 47.666619000000026, -122.39204003999998, 47.666219040000044, -122.39153999999996, 47.666018970000039, -122.39084015999998, 47.666718990000049, -122.39043983999994, 47.666718990000049, -122.39003987999996, 47.666656980000027, -122.38913987999996, 47.666519010000059, -122.38814015999998, 47.666619990000072, -122.38783991999998, 47.666320020000057, -122.38743995999999, 47.666520000000048, -122.38515503999997, 47.664720990000035, -122.38585487999995, 47.664221040000029, -122.38535699999994, 47.664020970000081, -122.38475795999994, 47.664421020000077, -122.38416215999996, 47.663921970000047, -122.38316495999999, 47.664422010000067, -122.38217207999998, 47.663523000000055, -122.38157411999998, 47.663622990000079, -122.38247195999998, 47.662822980000044, -122.37988895999996, 47.661125040000059, -122.37849395999996, 47.661824970000055, -122.37630587999996, 47.661001020000072, -122.37610787999995, 47.660927040000047, -122.37333911999997, 47.660820030000082, -122.37173891999998, 47.660820030000082, -122.37043895999994, 47.659719960000075, -122.36677595999998, 47.656901970000035, -122.36653907999994, 47.656719990000056, -122.36503895999999, 47.657819970000048, -122.36493887999995, 47.658320010000068, -122.36488199999997, 47.658490020000045, -122.36473907999999, 47.658920040000055, -122.36537087999994, 47.658998970000027, -122.36553899999996, 47.659020030000079, -122.36592815999995, 47.659064040000032, -122.36583887999996, 47.65941999000006, -122.36583887999996, 47.660020020000047, -122.36593895999999, 47.660519970000053, -122.36583887999996, 47.660920020000049, -122.36583887999996, 47.661519960000078, -122.36373899999995, 47.661519960000078, -122.36273783999997, 47.661519960000078, -122.36193899999995, 47.661519960000078, -122.36053895999999, 47.661519960000078, -122.36053895999999, 47.662419960000079, -122.36063903999997, 47.663019990000066, -122.36053895999999, 47.663219970000057, -122.36052491999999, 47.663508960000058, -122.36051411999995, 47.665080990000035, -122.36053895999999, 47.665719990000071, -122.36053895999999, 47.666420010000081, -122.36052995999995, 47.666784150000069, -122.36053895999999, 47.667269970000063, -122.36053895999999, 47.66792004000007, -122.36053895999999, 47.668519980000042, -122.36053895999999, 47.669419980000043, -122.36063903999997, 47.670820020000065, -122.36072399999995, 47.671011990000068, -122.36053895999999, 47.671419960000037, -122.36046587999999, 47.672080020000067, -122.36046083999997, 47.672720010000035, -122.36053895999999, 47.674119960000041, -122.36043887999995, 47.675919960000044, -122.36123915999997, 47.675919960000044, -122.36163911999995, 47.675919960000044, -122.36223887999995, 47.675919960000044, -122.36263883999999, 47.675919960000044, -122.36333903999997, 47.675919960000044, -122.36383907999999, 47.675919960000044, -122.36433911999995, 47.676020040000026, -122.36483915999997, 47.675919960000044, -122.36533883999999, 47.675919960000044, -122.36583887999996, 47.676020040000026, -122.36583887999996, 47.677820040000029, -122.36583887999996, 47.679419970000026, -122.36593895999999, 47.681420040000035, -122.36583887999996, 47.681720010000049, -122.36583887999996, 47.682520020000027, -122.36583887999996, 47.683220040000037, -122.36584535999998, 47.684611530000041, -122.36584787999999, 47.685202020000077, -122.36587307999997, 47.690626860000066, -122.36593895999999, 47.705119020000041, -122.36058683999994, 47.705119020000041, -122.36063903999997, 47.706919020000043, -122.36153903999997, 47.707019010000067, -122.36263883999999, 47.707719030000078, -122.36263883999999, 47.708919000000037, -122.36333903999997, 47.708919000000037, -122.36283899999995, 47.709619020000048, -122.36323895999999, 47.709918990000062, -122.36453891999997, 47.709419040000057, -122.36523983999996, 47.710319040000059, -122.36474015999994, 47.711118960000078};
      System.out.print(contains(coordinate, points));
   }
   
   public static boolean contains(Coordinate coordinate, double[] points) {
      List<Double> lonPoints = new ArrayList<Double>();
      List<Double> latPoints = new ArrayList<Double>();
      
      for (int i = 0; i < points.length; i++) {
         if (i % 2 == 0) {
            lonPoints.add(points[i]);
         } else {
            latPoints.add(points[i]);
         }
      }
      double maxLat = latPoints.get(0);
      double maxLon = lonPoints.get(0);
      double minLat = latPoints.get(0);
      double minLon = lonPoints.get(0);
      for (int i = 0; i < latPoints.size(); i++) {
         maxLat = Math.max(latPoints.get(i), maxLat);
         maxLon = Math.max(lonPoints.get(i), maxLon);
         minLat = Math.min(latPoints.get(i), minLat);
         minLon = Math.min(lonPoints.get(i), minLon);
      }
      double lat = coordinate.getLatitude();
      double lon = coordinate.getLongitude();
      if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {
         return false;
      }
      boolean ok = false;
      int i = 0;
      int j = lonPoints.size() - 1;
      while (i < lonPoints.size()) {
         if (((lonPoints.get(i) > lon) != (lonPoints.get(j) > lon)) &&
               (lat < (latPoints.get(j) - latPoints.get(i)) * (lon - lonPoints.get(i)) / 
               (lonPoints.get(j) - lonPoints.get(i)) + latPoints.get(i))) {
            ok = !ok;
         }
         j = i;
         i++;
      }
      return ok;
   }
}